(* This is the version of the density that utilizes the re-expression with respect
to the special functions 2F1 or Appell F1 *)
(* Just to make sure how Mathematica takes the syntax for the Hypergeometric2F1 *)
Integrate[u^(b-1) * (1-u)^(c-b-1)*(1-z*u)^(a),{u,0,1}]
(* E1 *)
Integrate[(u*x)^(a11-1) * (x-u*x)^(a10+a01-2)*(1-2*x+u*x)^(a00-1)*x,{u,0,1}]
ConditionalExpression[(1-2 x)^(-1+a00) x^(-2+a01+a10+a11) Gamma[-1+a01+a10] Gamma[a11] Hypergeometric2F1Regularized[1-a00,a11,-1+a01+a10+a11,x/(-1+2 x)],Re[a01+a10]>1&&Re[a11]>0&&0<Re[x]<1/2&&Im[x]==0]
(* E2 *)
Integrate[((1-x)*u+(2*x-1))^(a11-1) * (x-(1-x)*u-(2*x-1))^(a10+a01-2)*(1-2*x+u*(1-x)+(2*x-1))^(a00-1)*(1-x),{u,0,1}]
ConditionalExpression[(1-x)^(-2+a00+a01+a10) (-1+2 x)^(-1+a11) Gamma[a00] Gamma[-1+a01+a10] Hypergeometric2F1Regularized[a00,1-a11,-1+a00+a01+a10,(-1+x)/(-1+2 x)],(1+Re[1/(-1+x)]>=0||2+Re[1/(-1+x)]<=0||1/(-1+x)∉Reals)&&Re[a00]>0&&Re[a01+a10]>1&&2 Re[x]>1]
(* E3 *)
x^(a11+a10+a00-2)* (1-x)^(a01-1)*Integrate[(u)^(a11+a00-2) * (1-u)^(a10-1)*(1-u*x/(1-x))^(a01-1),{u,0,1}]
ConditionalExpression[(1-x)^(-1+a01) x^(-2+a00+a10+a11) Gamma[a10] Gamma[-1+a00+a11] Hypergeometric2F1Regularized[1-a01,-1+a00+a11,-1+a00+a10+a11,-(x/(-1+x))],(Re[1/x]>=2||Re[1/x]<=1||1/x∉Reals)&&Re[a10]>0&&Re[a00+a11]>1]
(* E4 *)
(1-x)^(a11+a01+a00-2)* (x)^(a10-1)*Integrate[(u)^(a11+a00-2) * (1-u)^(a01-1)*(1-u*(1-x)/x)^(a10-1),{u,0,1}]
ConditionalExpression[(1-x)^(-2+a00+a01+a11) x^(-1+a10) Gamma[a01] Gamma[-1+a00+a11] Hypergeometric2F1Regularized[1-a10,-1+a00+a11,-1+a00+a01+a11,-1+1/x],(Re[x/(-1+x)]==-1||Re[x/(1-x)]>=1||Re[x/(-1+x)]>=0||x/(-1+x)∉Reals)&&Re[a01]>0&&Re[a00+a11]>1]

(* Area 1 *)
x^(a11+a10-1)*y^(a01-1)*(1-x-y)^(a00-1)*
Integrate[u^(a11-1)*(1-u)^(a10-1)*(1-(x/y)*u)^(a01-1)*(1-(x/(x+y-1))*u)^(a00-1),{u,0,1}]

(* Point xy1/2 *)
P[a11_, a10_, a01_, a00_, x_, y_]:= 
(1/2)^(a11+a10+a01+a00-3) * 
Gamma[a11+a00-1]* Gamma[a10+a01-1] / Gamma[a11+a10+a01+a00-2];


(* Line xy && 0<x<1/2 *)E1[a11_, a10_, a01_, a00_, x_, y_]:= (Gamma[a11] *Gamma[a10+a01-1]/Gamma[a11+a10+a01-1]) *
x^(a11+a10+a01-2) * (1-2*x)^(a00-1)*Hypergeometric2F1[1-a00,a11,a11+a10+a01-1,x/(2*x-1)];

 (* Line xy && 1/2<x<1 *)
E2[a11_, a10_, a01_, a00_, x_, y_]:= 
(Gamma[a00] *Gamma[a10+a01-1]/Gamma[a10+a01+a00-1]) *
(1-x)^(a10+a01+a00-2) * (2*x-1)^(a11-1)*Hypergeometric2F1[1-a11,a00,a10+a01+a00-1,(x-1)/(2*x-1)];

(* Line x+y==1 && 0<x<1/2 *)
E3[a11_, a10_, a01_, a00_, x_, y_]:= (Gamma[a11+a00-1] *Gamma[a10]/Gamma[a11+a10+a00-1]) *
x^(a11+a10+a00-2)* (1-x)^(a01-1)*
Hypergeometric2F1[1-a01,a11+a00-1,a11+a10+a00-1,x/(1-x)];

(* Line x+y==1 && 1/2<x<1 *)
E4[a11_, a10_, a01_, a00_, x_, y_]:= (Gamma[a11+a00-1] *Gamma[a01]/Gamma[a11+a01+a00-1]) *
x^(a10-1)*(1-x)^(a11+a01+a00-2)*
Hypergeometric2F1[1-a10,a11+a00-1,a11+a01+a00-1,(1-x)/x];

(* Area x+y<1 && 0<x<y<1 *)
A1[a11_, a10_, a01_, a00_, x_,y_]:=
(Gamma[a11] *Gamma[a10]/Gamma[a11+a10]) *
x^(a11+a10-1) *y^(a01-1)* (1-x-y)^(a00-1)*
AppellF1[a11, 1-a01, 1-a00, a11+a10, x/y, x/(x+y-1)];

(* Area x+y<1 && 0<y<x<1 *)
A2[a11_, a10_, a01_, a00_, x_,y_]:=
(Gamma[a11] *Gamma[a01]/Gamma[a11+a01]) *
x^(a10-1)* y^(a11+a01-1) * (1-x-y)^(a00-1)*
AppellF1[a11, 1-a10, 1-a00, a11+a01, y/x, y/(x+y-1)];

(* Area x+y>1 && 0<x<y<1 *)
A3[a11_, a10_, a01_, a00_, x_,y_]:=
  (Gamma[a10] *Gamma[a00]/Gamma[a10+a00]) * 
(1-x)^(a01-1)* (1-y)^(a10+a00-1) * (x+y-1)^(a11-1) *
 AppellF1[a00, 1-a11, 1-a01, a10+a00, (1-y)/(1-x-y), (1-y)/(1-x)];

(* Area x+y>1 && 0<y<x<1 *)
A4[a11_, a10_, a01_, a00_, x_,y_]:=  
(Gamma[a01] *Gamma[a00]/Gamma[a01+a00]) * 
(1-x)^(a01+a00-1)* (1-y)^(a10-1) * (x+y-1)^(a11-1) *
 AppellF1[a00, 1-a11, 1-a10, a01+a00, (1-x)/(1-x-y), (1-x)/(1-y)];



OlkinTrikalinos[a11_, a10_, a01_, a00_, x_,y_]:= 
Piecewise[{
{P[a11, a10, a01, a00, x, y] ,x==y ==1/2},
{E1[a11, a10, a01, a00, x, y] ,x==y && 0<x<1/2}, {E2[a11, a10, a01, a00, x, y] ,x==y && 1/2<x<1},
{E3[a11, a10, a01, a00, x, y] ,x+y==1 && 0<x<1/2},
{E4[a11, a10, a01, a00, x, y] ,x+y==1 && 1/2<x<1}, 
{A1[a11, a10, a01, a00, x, y] ,x+y<1 && 0<x<y<1},
{A2[a11, a10, a01, a00, x, y] ,x+y<1 && 0<y<x<1}, 
{A3[a11, a10, a01, a00, x, y] ,x+y>1 && 0<x<y<1},
{A4[a11, a10, a01, a00, x, y] ,x+y>1 && 0<y<x<1}
}]




Plot3D[OlkinTrikalinos[2,2,2,2,x,y],{x,0,1},{y,0,1}, 
PlotRange->Full, PlotPoints->50, 
AxesLabel->{Style["x",Large], Style["y",Large], Style[ "f(x,y)", Large]}, 
LabelStyle->Directive[FontSize->16], Mesh->10, ClippingStyle->None]
